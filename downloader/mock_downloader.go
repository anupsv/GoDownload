// Code generated by MockGen. DO NOT EDIT.
// Source: downloader/downloader.go

// Package downloader is a generated GoMock package.
package downloader

import (
	context "context"
	reflect "reflect"

	v3 "github.com/cheggaaa/pb/v3"
	gomock "github.com/golang/mock/gomock"
)

// MockDownloaderInterface is a mock of DownloaderInterface interface.
type MockDownloaderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDownloaderInterfaceMockRecorder
}

// MockDownloaderInterfaceMockRecorder is the mock recorder for MockDownloaderInterface.
type MockDownloaderInterfaceMockRecorder struct {
	mock *MockDownloaderInterface
}

// NewMockDownloaderInterface creates a new mock instance.
func NewMockDownloaderInterface(ctrl *gomock.Controller) *MockDownloaderInterface {
	mock := &MockDownloaderInterface{ctrl: ctrl}
	mock.recorder = &MockDownloaderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloaderInterface) EXPECT() *MockDownloaderInterfaceMockRecorder {
	return m.recorder
}

// DownloadFile mocks base method.
func (m *MockDownloaderInterface) DownloadFile(url, destPath string, bar *v3.ProgressBar, ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", url, destPath, bar, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockDownloaderInterfaceMockRecorder) DownloadFile(url, destPath, bar, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockDownloaderInterface)(nil).DownloadFile), url, destPath, bar, ctx)
}

// DownloadFiles mocks base method.
func (m *MockDownloaderInterface) DownloadFiles(provider URLProvider, dir string, threads int, ctx context.Context) []*v3.ProgressBar {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFiles", provider, dir, threads, ctx)
	ret0, _ := ret[0].([]*v3.ProgressBar)
	return ret0
}

// DownloadFiles indicates an expected call of DownloadFiles.
func (mr *MockDownloaderInterfaceMockRecorder) DownloadFiles(provider, dir, threads, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFiles", reflect.TypeOf((*MockDownloaderInterface)(nil).DownloadFiles), provider, dir, threads, ctx)
}

// MockDownloaderFactory is a mock of DownloaderFactory interface.
type MockDownloaderFactory struct {
	ctrl     *gomock.Controller
	recorder *MockDownloaderFactoryMockRecorder
}

// MockDownloaderFactoryMockRecorder is the mock recorder for MockDownloaderFactory.
type MockDownloaderFactoryMockRecorder struct {
	mock *MockDownloaderFactory
}

// NewMockDownloaderFactory creates a new mock instance.
func NewMockDownloaderFactory(ctrl *gomock.Controller) *MockDownloaderFactory {
	mock := &MockDownloaderFactory{ctrl: ctrl}
	mock.recorder = &MockDownloaderFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloaderFactory) EXPECT() *MockDownloaderFactoryMockRecorder {
	return m.recorder
}

// NewDownloader mocks base method.
func (m *MockDownloaderFactory) NewDownloader(client HttpClient) DownloaderInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDownloader", client)
	ret0, _ := ret[0].(DownloaderInterface)
	return ret0
}

// NewDownloader indicates an expected call of NewDownloader.
func (mr *MockDownloaderFactoryMockRecorder) NewDownloader(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDownloader", reflect.TypeOf((*MockDownloaderFactory)(nil).NewDownloader), client)
}
